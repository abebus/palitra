import asyncio
from collections.abc import Coroutine
from typing import Any, TypeVar

T = TypeVar("T")

class EventLoopThreadRunner:
    def __init__(self) -> None: ...
    def __enter__(self) -> "EventLoopThreadRunner": ...
    def __exit__(self, exc_type, exc_val, exc_tb) -> None: ...
    def run(self, coro: Coroutine[Any, Any, T], timeout: float | None = ...) -> T: ...
    def gather(self, *coros: Coroutine[Any, Any, T], return_exceptions: bool = ..., timeout: float | None = ...) -> list[T | BaseException]: ...
    def get_loop(self) -> asyncio.AbstractEventLoop: ...
    def close(self) -> None: ... 